<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris ter Beke</title>
    <link>https://christerbeke.com/</link>
    <description>Recent content on Chris ter Beke</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Dec 2023 08:41:01 +0100</lastBuildDate><atom:link href="https://christerbeke.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>On Requirements</title>
      <link>https://christerbeke.com/posts/on-requirements/</link>
      <pubDate>Tue, 05 Dec 2023 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/posts/on-requirements/</guid>
      <description>When working in growing companies, you&amp;rsquo;ll start to notice that the amount of requirements grows as well. Often these requirements are fuzzy and it is unclear who wrote them in the first place. Before you know it your product has all kinds complexity from requirements that weren&amp;rsquo;t neccesery in the first place. How to fix this?
Question every requirement
When discussing existing or incoming requirements, decide first if the requirement makes sense at all.</description>
    </item>
    
    <item>
      <title>Terraform with YAML: Part 2</title>
      <link>https://christerbeke.com/posts/terraform-with-yaml-part-2/</link>
      <pubDate>Fri, 14 Jul 2023 08:00:00 +0100</pubDate>
      
      <guid>https://christerbeke.com/posts/terraform-with-yaml-part-2/</guid>
      <description>This post is the second in a series of three about supercharging your Terraform setup using YAML.
In part one of this series we learned how to use YAML to simplify the configuration of Terraform resources. We mainly focussed on reducing syntax overhead of the HCL language and making the configuration accessible to non-infra engineers.
In this second part we will dive into some more advanced techniques and patterns.</description>
    </item>
    
    <item>
      <title>Guarantee unique keys in Terraform</title>
      <link>https://christerbeke.com/posts/terraform-unique-keys/</link>
      <pubDate>Wed, 05 Apr 2023 11:22:10 +0200</pubDate>
      
      <guid>https://christerbeke.com/posts/terraform-unique-keys/</guid>
      <description>When using Terraform to dynamically create resources based on lists of maps you probaby have run into this issue. Consider the following list of maps that represents IAM access on a generic cloud resource:
locals = { members = [ { member = &amp;#34;contact@christerbeke.com&amp;#34; resource = &amp;#34;projects/12345&amp;#34; role = &amp;#34;roles/owner&amp;#34; }, { member = &amp;#34;test@christerbeke.com&amp;#34; resource = &amp;#34;projects/12345&amp;#34; role = &amp;#34;roles/reader&amp;#34; } ] } If we want to iterate over this list to create a dynamic amount of resources (using for_each) we need to convert it to a map.</description>
    </item>
    
    <item>
      <title>Terraform with YAML: Part 1</title>
      <link>https://christerbeke.com/posts/terraform-with-yaml-part-1/</link>
      <pubDate>Tue, 14 Mar 2023 08:00:00 +0100</pubDate>
      
      <guid>https://christerbeke.com/posts/terraform-with-yaml-part-1/</guid>
      <description>This post is the first in a series of three about supercharging your Terraform setup using YAML.
Terraform is one of the most common tools to provision infrastructure from code or configuration. However it&amp;rsquo;s using a custom language called HCL (Hashicorp Configuration Language). In this blog post we will explore how we can replace as much HCL code as possible with YAML and what the benefits are of doing so.</description>
    </item>
    
    <item>
      <title>Cura Adapter Layer Heights</title>
      <link>https://christerbeke.com/projects/cura-adaptive-layer-heights/</link>
      <pubDate>Fri, 30 Dec 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/projects/cura-adaptive-layer-heights/</guid>
      <description>Adapter Layer Heights is a feature for Ultimaker Cura that automatically detects and generates the height of each layer depending on the 3D model geometry. This reduces total printing time while retaining the necessery detail in some areas of the 3D model.
Several websites have published articles about this feature after it&amp;rsquo;s introduction:
all3dp.com 3duniverse.org the3dprinterbee.com 3mgbonev.com More details are available in the paper I wrote that lead to it&amp;rsquo;s implementation in Cura.</description>
    </item>
    
    <item>
      <title>Cura ThingiBrowser</title>
      <link>https://christerbeke.com/projects/cura-thingibrowser-plugin/</link>
      <pubDate>Fri, 30 Dec 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/projects/cura-thingibrowser-plugin/</guid>
      <description>The Cura ThingiBrowser is a Cura plugin that adds the ability to directly import 3D models from popular online repositories into Cura.
The plugin sends anonymous usage statistics to Google Analytics.</description>
    </item>
    
    <item>
      <title>Homey Enphase</title>
      <link>https://christerbeke.com/projects/homey-enphase/</link>
      <pubDate>Fri, 30 Dec 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/projects/homey-enphase/</guid>
      <description>The Homey Enphase App adds support for Enphase Envoy gateways to Homey. This allows you to track solar production in Homey, and create automations based on it.</description>
    </item>
    
    <item>
      <title>Kerbal Operating System</title>
      <link>https://christerbeke.com/projects/kerbal-operating-system/</link>
      <pubDate>Fri, 30 Dec 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/projects/kerbal-operating-system/</guid>
      <description>Kerbal Operating System scripts aims to make it easier to write and configure mission profiles for Kerbal Operating System. By defining models and nesting and chaining those in a mission sequence, new missions can be defined and launched with just a few lines of code.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://christerbeke.com/about/</link>
      <pubDate>Tue, 20 Dec 2022 19:49:05 +0100</pubDate>
      
      <guid>https://christerbeke.com/about/</guid>
      <description>Cloud Consultant @ Xebia Cloud (2022 - now) Link to heading Part of Xebia Cloud organizes your cloud journey, develops cloud native solutions, trains your teams, and provides managed cloud services. As cloud consultant, I help customers in different industries bring their applications to the cloud, specifically focussing on Google Cloud Platform.
Read my articles on xebia.com →
Professional Cloud Architect Certification →
Software Architect @ Ultimaker (2017 - 2021) Link to heading Ultimaker&amp;rsquo;s mission is to accelerate the world&amp;rsquo;s transition to local manufacturing and digital distribution.</description>
    </item>
    
    <item>
      <title>Creating a non-classic Google Cloud Global Load Balancer with Terraform</title>
      <link>https://christerbeke.com/posts/gcp-non-classic-load-balancer/</link>
      <pubDate>Fri, 16 Sep 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/posts/gcp-non-classic-load-balancer/</guid>
      <description>The Google Cloud Terraform Provider has resources to configure a Global External HTTP(S) Load Balancer. By default however this creates a classic load balancer, not a new one. For new features like traffic management you cannot use the classic load balancer, so you definitely want to use the new one.
The Google and Terraform documentation is not clear about how to do this properly. The name classic does not even appear once on the documentation pages for the relevant resources.</description>
    </item>
    
    <item>
      <title>A declarative approach for Dataflow Flex Templates</title>
      <link>https://christerbeke.com/posts/gcp-dataflow-terraform/</link>
      <pubDate>Thu, 28 Jul 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/posts/gcp-dataflow-terraform/</guid>
      <description>Google Cloud offers a managed Apache Beam solution called Dataflow. Since some time now Dataflow has a feature called Flex Templates. Flex Templates use Docker containers instead of Dataflow&amp;rsquo;s custom templates. The benefit is that Docker is a known standard and the container can run in different environments. However, a custom metadata JSON file is still needed to point to the Docker image in your registry.
Both the CLI and the Terraform approach require you to push the Docker image to a registry.</description>
    </item>
    
    <item>
      <title>A minimal setup for a high availability service using Cloud Run</title>
      <link>https://christerbeke.com/posts/gcp-cloud-run-highly-available/</link>
      <pubDate>Tue, 11 Jan 2022 08:41:01 +0100</pubDate>
      
      <guid>https://christerbeke.com/posts/gcp-cloud-run-highly-available/</guid>
      <description>In this blog post, I will explain what is needed to set up a web service that runs in multiple GCP regions. The main reasons to deploy your service in more than one region are:
Handle single-region failures so that your application is highly available. Route traffic to the nearest region so your users experience faster loading times. Create Cloud Run deployments Link to heading A Cloud Run service only lives in a single region, so for a multi-region setup we will need to deploy the same container in multiple regions.</description>
    </item>
    
  </channel>
</rss>
